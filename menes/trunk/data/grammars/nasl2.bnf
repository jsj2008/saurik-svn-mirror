<?xml version="1.1"?>
<bnf:grammar
    xmlns:bnf="http://www.saurik.com/menes/bnf/0.9"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    name="NASL2"
    goal="wrapper"
    bnf:tokenizer="input-tokenizer"
>

<bnf:define name="line-tokenizer">
    <bnf:or mode="short-circuit">
        <bnf:string value="&#xd;&#xa;"/>
        <bnf:string value="&#xd;"/>
        <bnf:string value="&#xa;"/>
    </bnf:or>
</bnf:define>

<bnf:define name="white-space">
    <bnf:or>
        <bnf:string value=" "/>
        <bnf:string value="&#x9;"/>
        <bnf:call name="line-tokenizer"/>
    </bnf:or>
</bnf:define>

<bnf:define name="comment" bnf:tokenizer="">
    <bnf:string value="#"/>

    <comment>
        <bnf:repeated mode="possessive">
            <bnf:not>
                <bnf:call name="line-tokenizer"/>
            </bnf:not>

            <bnf:special type="any"/>
        </bnf:repeated>
    </comment>

    <bnf:call name="line-tokenizer"/>
</bnf:define>

<bnf:define name="input-tokenizer" bnf:tokenizer="" bnf:skip-debug="true">
    <bnf:or mode="short-circuit">
        <bnf:repeated least="1" mode="possessive">
            <bnf:or>
                <bnf:call name="comment"/>
                <bnf:call name="white-space"/>
            </bnf:or>
        </bnf:repeated>

        <bnf:not>
            <bnf:call name="identifier-continuer"/>
        </bnf:not>

        <bnf:reverse>
            <bnf:not>
                <bnf:call name="identifier-continuer"/>
            </bnf:not>

            <bnf:ignore>
                <bnf:assert>
                    <bnf:special type="any"/>
                </bnf:assert>
            </bnf:ignore>
        </bnf:reverse>

        <bnf:special type="bof"/>
        <bnf:special type="eof"/>
    </bnf:or>
</bnf:define>

<bnf:define name="comma">
    <bnf:string value=","/>
</bnf:define>

<bnf:define name="identifier-starter">
    <bnf:or>
        <bnf:string value="_"/>
        <bnf:range begin="a" end="z"/>
        <bnf:range begin="A" end="Z"/>
    </bnf:or>
</bnf:define>

<bnf:define name="identifier-continuer">
    <bnf:or>
        <bnf:call name="identifier-starter"/>
        <bnf:range begin="0" end="9"/>
    </bnf:or>
</bnf:define>

<bnf:define name="identifier" bnf:tokenizer="">
    <bnf:call name="identifier-starter"/>

    <bnf:repeated mode="possessive">
        <bnf:call name="identifier-continuer"/>
    </bnf:repeated>
</bnf:define>

<bnf:define name="translation-unit">
    <bnf:repeated>
        <bnf:call name="statement"/>
    </bnf:repeated>
</bnf:define>

<bnf:define name="wrapper" bnf:tokenizer="">
    <nasl>
        <bnf:call name="input-tokenizer"/>
        <bnf:call name="translation-unit"/>
        <bnf:call name="input-tokenizer"/>
    </nasl>
</bnf:define>

<bnf:define name="statements">
    <bnf:repeated>
        <bnf:call name="statement"/>
    </bnf:repeated>
</bnf:define>

<bnf:define name="statement">
    <bnf:or>
        <while>
            <bnf:string value="while"/>
            <bnf:string value="("/>

            <test>
                <bnf:call name="expression"/>
            </test>

            <bnf:string value=")"/>

            <body>
                <bnf:call name="statement"/>
            </body>
        </while>

        <function>
            <bnf:string value="function"/>
            <bnf:call name="identifier"/>
            <bnf:string value="("/>

            <arguments>
                <bnf:repeated separator="comma">
                    <bnf:call name="declarator"/>
                </bnf:repeated>
            </arguments>

            <bnf:string value=")"/>

            <bnf:string value="{"/>

            <body>
                <bnf:call name="statements"/>
            </body>

            <bnf:string value="}"/>
        </function>

        <if>
            <bnf:string value="if"/>
            <bnf:string value="("/>

            <test>
                <bnf:call name="expression"/>
            </test>

            <bnf:string value=")"/>

            <then>
                <bnf:call name="statement"/>
            </then>

            <bnf:optional mode="possessive">
                <bnf:string value="else"/>

                <else>
                    <bnf:call name="statement"/>
                </else>
            </bnf:optional>
        </if>

        <foreach>
            <bnf:string value="foreach"/>

            <variable>
                <bnf:call name="identifier"/>
            </variable>

            <bnf:string value="("/>

            <array>
                <bnf:call name="expression"/>
            </array>

            <bnf:string value=")"/>

            <body>
                <bnf:call name="statement"/>
            </body>
        </foreach>

        <repeat>
            <bnf:string value="repeat"/>

            <body>
                <bnf:call name="statement"/>
            </body>

            <bnf:string value="until"/>
            <bnf:string value="("/>

            <test>
                <bnf:string value="expression"/>
            </test>

            <bnf:string value=")"/>
            <bnf:string value=";"/>
        </repeat>

        <for>
            <bnf:string value="for"/>
            <bnf:string value="("/>

            <bnf:optional>
                <before>
                    <bnf:call name="expression"/>
                </before>
            </bnf:optional>

            <bnf:string value=";"/>

            <bnf:optional>
                <test>
                    <bnf:call name="expression"/>
                </test>
            </bnf:optional>

            <bnf:string value=";"/>

            <bnf:optional>
                <step>
                    <bnf:call name="expression"/>
                </step>
            </bnf:optional>

            <bnf:string value=")"/>

            <body>
                <bnf:call name="statement"/>
            </body>
        </for>

        <locals>
            <bnf:string value="local_var"/>

            <bnf:repeated least="1" separator="comma">
                <bnf:call name="declarator"/>
            </bnf:repeated>

            <bnf:string value=";"/>
        </locals>

        <globals>
            <bnf:string value="global_var"/>

            <bnf:repeated least="1" separator="comma">
                <bnf:call name="declarator"/>
            </bnf:repeated>

            <bnf:string value=";"/>
        </globals>

        <break>
            <bnf:string value="break"/>

            <bnf:optional>
                <target>
                    <bnf:call name="identifier"/>
                </target>
            </bnf:optional>

            <bnf:string value=";"/>
        </break>

        <throw>
            <bnf:string value="throw"/>
            <bnf:call name="expression"/>
            <bnf:string value=";"/>
        </throw>

        <continue>
            <bnf:string value="continue"/>

            <bnf:optional>
                <target>
                    <bnf:call name="identifier"/>
                </target>
            </bnf:optional>

            <bnf:string value=";"/>
        </continue>

        <do-while>
            <bnf:string value="do"/>

            <body>
                <bnf:call name="statement"/>
            </body>

            <bnf:string value="while"/>
            <bnf:string value="("/>

            <test>
                <bnf:call name="expression"/>
            </test>

            <bnf:string value=")"/>
            <bnf:string value=";"/>
        </do-while>

        <return>
            <bnf:string value="return"/>

            <bnf:optional>
                <value>
                    <bnf:call name="expression"/>
                </value>
            </bnf:optional>

            <bnf:string value=";"/>
        </return>

        <bnf:block>
            <bnf:call name="expression"/>
            <bnf:string value=";"/>
        </bnf:block>

        <bnf:block>
            <bnf:string value="{"/>

            <block>
                <bnf:call name="statements"/>
            </block>

            <bnf:string value="}"/>
        </bnf:block>

        <bnf:string value=";"/>
    </bnf:or>
</bnf:define>

<bnf:define name="declarator">
    <name>
        <bnf:call name="identifier"/>
    </name>
</bnf:define>

<bnf:define name="dec-integer" bnf:tokenizer="">
    <bnf:or>
        <bnf:string value="0"/>

        <bnf:block>
            <bnf:range begin="1" end="9"/>

            <bnf:repeated>
                <bnf:range begin="0" end="9"/>
            </bnf:repeated>
        </bnf:block>
    </bnf:or>
</bnf:define>

<bnf:define name="integer" bnf:tokenizer="">
    <bnf:or>
        <bnf:block>
            <bnf:string value="0x"/>

            <hex-integer>
                <bnf:repeated least="1">
                    <bnf:or>
                        <bnf:range begin="0" end="9"/>
                        <bnf:range begin="a" end="f"/>
                        <bnf:range begin="A" end="F"/>
                    </bnf:or>
                </bnf:repeated>
            </hex-integer>
        </bnf:block>

        <bnf:block>
            <bnf:string value="0"/>

            <oct-integer>
                <bnf:repeated least="1">
                    <bnf:or>
                        <bnf:range begin="0" end="7"/>
                    </bnf:or>
                </bnf:repeated>
            </oct-integer>
        </bnf:block>

        <bnf:block>
            <dec-integer>
                <bnf:call name="dec-integer"/>
            </dec-integer>
        </bnf:block>
    </bnf:or>
</bnf:define>

<bnf:define name="real" bnf:tokenizer="">
    <real>
        <bnf:call name="dec-integer"/>
        <bnf:string value="."/>

        <bnf:repeated>
            <bnf:range begin="0" end="9"/>
        </bnf:repeated>
    </real>
</bnf:define>

<bnf:define name="number">
    <bnf:or>
        <bnf:call name="integer"/>
        <bnf:call name="real"/>
    </bnf:or>
</bnf:define>

<bnf:define name="escaped-character">
    <bnf:string value="\"/>

    <bnf:or mode="short-circuit">
        <escape>
            <bnf:or>
                <bnf:string value="0"/>
                <bnf:string value="n"/>
                <bnf:string value="r"/>
            </bnf:or>
        </escape>

        <bnf:special type="any"/>
    </bnf:or>
</bnf:define>

<bnf:define name="string">
    <bnf:or>
        <bnf:call name="impure-string"/>
        <bnf:call name="pure-string"/>
    </bnf:or>
</bnf:define>

<bnf:define name="impure-string" bnf:tokenizer="">
    <bnf:string value="&quot;"/>

    <impure-string>
        <bnf:repeated>
            <bnf:or mode="short-circuit">
                <bnf:call name="escaped-character"/>

                <bnf:block>
                    <bnf:not>
                        <bnf:string value="&quot;"/>
                    </bnf:not>

                    <bnf:special type="any"/>
                </bnf:block>
            </bnf:or>
        </bnf:repeated>
    </impure-string>

    <bnf:string value="&quot;"/>
</bnf:define>

<bnf:define name="pure-string" bnf:tokenizer="">
    <bnf:string value="'"/>

    <pure-string>
        <bnf:repeated>
            <bnf:or mode="short-circuit">
                <bnf:call name="escaped-character"/>

                <bnf:block>
                    <bnf:not>
                        <bnf:string value="'"/>
                    </bnf:not>

                    <bnf:special type="any"/>
                </bnf:block>
            </bnf:or>
        </bnf:repeated>
    </pure-string>

    <bnf:string value="'"/>
</bnf:define>

<bnf:define name="atomic-expression">
    <bnf:or>
        <constant>
            <bnf:or>
                <bnf:string value="true"/>
                <bnf:string value="false"/>

                <bnf:string value="null"/>
            </bnf:or>
        </constant>

        <bnf:call name="number"/>
        <bnf:call name="string"/>

        <variable>
            <bnf:call name="identifier"/>
        </variable>

        <bnf:block>
            <bnf:string value="("/>
            <bnf:call name="expression"/>
            <bnf:string value=")"/>
        </bnf:block>
    </bnf:or>
</bnf:define>

<bnf:define name="postfix-expression">
    <bnf:or>
        <element-of>
            <lhs>
                <bnf:call name="postfix-expression"/>
            </lhs>

            <bnf:string value="["/>

            <argument>
                <bnf:call name="expression"/>
            </argument>

            <bnf:string value="]"/>
        </element-of>

        <member-of>
            <lhs>
                <bnf:call name="postfix-expression"/>
            </lhs>

            <bnf:string value="."/>

            <name>
                <bnf:call name="identifier"/>
            </name>
        </member-of>

        <function-call>
            <lhs>
                <bnf:call name="postfix-expression"/>
            </lhs>

            <bnf:string value="("/>

            <bnf:repeated separator="comma">
                <argument>
                    <bnf:optional>
                        <name>
                            <bnf:call name="identifier"/>
                        </name>

                        <bnf:string value=":"/>
                    </bnf:optional>

                    <bnf:call name="expression"/>
                </argument>
            </bnf:repeated>

            <bnf:string value=")"/>
        </function-call>

        <unary-operator>
            <lhs>
                <bnf:call name="postfix-expression"/>
            </lhs>

            <operator>
                <bnf:or>
                    <bnf:string value="++"/>
                    <bnf:string value="--"/>
                </bnf:or>
            </operator>
        </unary-operator>

        <bnf:call name="atomic-expression"/>
    </bnf:or>
</bnf:define>

<bnf:define name="prefix-expression">
    <bnf:or>
        <unary-operator>
            <operator>
                <bnf:or>
                    <bnf:string value="++"/>
                    <bnf:string value="--"/>
                    <bnf:string value="+"/>
                    <bnf:string value="-"/>
                    <bnf:string value="~"/>
                    <bnf:string value="!"/>
                </bnf:or>
            </operator>

            <rhs>
                <bnf:call name="prefix-expression"/>
            </rhs>
        </unary-operator>

        <bnf:call name="postfix-expression"/>
    </bnf:or>
</bnf:define>

<!--bnf:operators name="relative-operator-expression">
    <bnf:operator associativity="left">
        <bnf:string value="&lt;"/>
        <bnf:string value="&gt;"/>
        <bnf:string value="&lt;="/>
        <bnf:string value="&gt;="/>
    </bnf:operator>

    <bnf:operator associativity="left">
        <bnf:string value="&lt;&lt;"/>
        <bnf:string value="&gt;&gt;"/>
        <bnf:string value="&gt;&gt;&gt;"/>
    </bnf:operator>

    <bnf:operator associativity="left">
        <bnf:string value="+"/>
        <bnf:string value="-"/>
    </bnf:operator>

    <bnf:operator associativity="left">
        <bnf:string value="*"/>
        <bnf:string value="/"/>
        <bnf:string value="%"/>
    </bnf:operator>
</bnf:operators-->

<bnf:define name="multiplicative-expression">
    <bnf:or>
        <binary-operator>
            <lhs>
                <bnf:call name="multiplicative-expression"/>
            </lhs>

            <operator>
                <bnf:or>
                    <bnf:string value="*"/>
                    <bnf:string value="/"/>
                    <bnf:string value="%"/>
                </bnf:or>
            </operator>

            <rhs>
                <bnf:call name="prefix-expression"/>
            </rhs>
        </binary-operator>

        <bnf:call name="prefix-expression"/>
    </bnf:or>
</bnf:define>

<bnf:define name="additive-expression">
    <bnf:or>
        <binary-operator>
            <lhs>
                <bnf:call name="additive-expression"/>
            </lhs>

            <operator>
                <bnf:or>
                    <bnf:string value="+"/>
                    <bnf:string value="-"/>
                </bnf:or>
            </operator>

            <rhs>
                <bnf:call name="multiplicative-expression"/>
            </rhs>
        </binary-operator>

        <bnf:call name="multiplicative-expression"/>
    </bnf:or>
</bnf:define>

<bnf:define name="shift-expression">
    <bnf:or>
        <binary-operator>
            <lhs>
                <bnf:call name="shift-expression"/>
            </lhs>

            <operator>
                <bnf:or>
                    <bnf:string value="&lt;&lt;"/>
                    <bnf:string value="&gt;&gt;"/>
                    <bnf:string value="&gt;&gt;&gt;"/>
                </bnf:or>
            </operator>

            <rhs>
                <bnf:call name="additive-expression"/>
            </rhs>
        </binary-operator>

        <bnf:call name="additive-expression"/>
    </bnf:or>
</bnf:define>

<bnf:define name="relational-expression">
    <bnf:or>
        <binary-operator>
            <lhs>
                <bnf:call name="relational-expression"/>
            </lhs>

            <operator>
                <bnf:or>
                    <bnf:string value="&lt;"/>
                    <bnf:string value="&gt;"/>
                    <bnf:string value="&lt;="/>
                    <bnf:string value="&gt;="/>
                    <bnf:string value="&gt;&lt;"/>
                    <bnf:string value="&gt;!&lt;"/>
                    <bnf:string value="=~"/>
                    <bnf:string value="!~"/>
                </bnf:or>
            </operator>

            <rhs>
                <bnf:call name="shift-expression"/>
            </rhs>
        </binary-operator>

        <bnf:call name="shift-expression"/>
    </bnf:or>
</bnf:define>

<bnf:define name="equality-expression">
    <bnf:or>
        <binary-operator>
            <lhs>
                <bnf:call name="equality-expression"/>
            </lhs>

            <operator>
                <bnf:or>
                    <bnf:string value="=="/>
                    <bnf:string value="!="/>
                </bnf:or>
            </operator>

            <rhs>
                <bnf:call name="relational-expression"/>
            </rhs>
        </binary-operator>

        <bnf:call name="relational-expression"/>
    </bnf:or>
</bnf:define>

<bnf:define name="bitwise-and-expression">
    <bnf:or>
        <binary-operator>
            <lhs>
                <bnf:call name="bitwise-and-expression"/>
            </lhs>

            <operator>
                <bnf:or>
                    <bnf:string value="&amp;"/>
                </bnf:or>
            </operator>

            <rhs>
                <bnf:call name="equality-expression"/>
            </rhs>
        </binary-operator>

        <bnf:call name="equality-expression"/>
    </bnf:or>
</bnf:define>

<bnf:define name="bitwise-xor-expression">
    <bnf:or>
        <binary-operator>
            <lhs>
                <bnf:call name="bitwise-xor-expression"/>
            </lhs>

            <operator>
                <bnf:or>
                    <bnf:string value="^"/>
                </bnf:or>
            </operator>

            <rhs>
                <bnf:call name="bitwise-and-expression"/>
            </rhs>
        </binary-operator>

        <bnf:call name="bitwise-and-expression"/>
    </bnf:or>
</bnf:define>

<bnf:define name="bitwise-or-expression">
    <bnf:or>
        <binary-operator>
            <lhs>
                <bnf:call name="bitwise-or-expression"/>
            </lhs>

            <operator>
                <bnf:or>
                    <bnf:string value="|"/>
                </bnf:or>
            </operator>

            <rhs>
                <bnf:call name="bitwise-xor-expression"/>
            </rhs>
        </binary-operator>

        <bnf:call name="bitwise-xor-expression"/>
    </bnf:or>
</bnf:define>

<bnf:define name="logical-and-expression">
    <bnf:or>
        <binary-operator>
            <lhs>
                <bnf:call name="logical-and-expression"/>
            </lhs>

            <operator>
                <bnf:or>
                    <bnf:string value="&amp;&amp;"/>
                </bnf:or>
            </operator>

            <rhs>
                <bnf:call name="bitwise-or-expression"/>
            </rhs>
        </binary-operator>

        <bnf:call name="bitwise-or-expression"/>
    </bnf:or>
</bnf:define>

<bnf:define name="logical-or-expression">
    <bnf:or>
        <binary-operator>
            <lhs>
                <bnf:call name="logical-or-expression"/>
            </lhs>

            <operator>
                <bnf:or>
                    <bnf:string value="||"/>
                </bnf:or>
            </operator>

            <rhs>
                <bnf:call name="logical-and-expression"/>
            </rhs>
        </binary-operator>

        <bnf:call name="logical-and-expression"/>
    </bnf:or>
</bnf:define>

<bnf:define name="conditional-expression" bnf:left-corner="true">
    <bnf:or>
        <conditional>
            <test>
                <bnf:call name="logical-or-expression"/>
            </test>

            <bnf:string value="?"/>

            <then>
                <bnf:call name="logical-or-expression"/>
            </then>

            <bnf:string value=":"/>

            <else>
                <bnf:call name="logical-or-expression"/>
            </else>
        </conditional>

        <bnf:call name="logical-or-expression"/>
    </bnf:or>
</bnf:define>

<bnf:define name="assignment-expression" bnf:left-corner="true">
    <bnf:or>
        <binary-operator>
            <lhs>
                <bnf:call name="conditional-expression"/>
            </lhs>

            <operator>
                <bnf:or>
                    <bnf:string value="="/>
                    <bnf:string value="+="/>
                    <bnf:string value="-="/>
                    <bnf:string value="*="/>
                    <bnf:string value="/="/>
                    <bnf:string value="%="/>
                    <bnf:string value="&amp;="/>
                    <bnf:string value="^="/>
                    <bnf:string value="|="/>
                    <bnf:string value="&lt;&lt;="/>
                    <bnf:string value="&gt;&gt;="/>
                    <bnf:string value="&gt;&gt;&gt;="/>
                </bnf:or>
            </operator>

            <rhs>
                <bnf:call name="assignment-expression"/>
            </rhs>
        </binary-operator>

        <bnf:call name="conditional-expression"/>
    </bnf:or>
</bnf:define>

<bnf:define name="expression">
    <bnf:call name="assignment-expression"/>
</bnf:define>

</bnf:grammar>
